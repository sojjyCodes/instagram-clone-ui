{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/ebenezer/Project/Mobile Dev/instagram-clone-ui/node_modules/react-native-base/Components/vendor/react-native-drawer/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport tween from \"./tweener\";\nvar deviceScreen = Dimensions.get('window');\n\nvar Drawer = function (_Component) {\n  _inherits(Drawer, _Component);\n\n  var _super = _createSuper(Drawer);\n\n  function Drawer(props) {\n    var _this;\n\n    _classCallCheck(this, Drawer);\n\n    _this = _super.call(this, props);\n    _this._left = 0;\n    _this._prevLeft = 0;\n    _this._offsetOpen = 0;\n    _this._offsetClosed = 0;\n    _this._open = false;\n    _this._panning = false;\n    _this._tweenPending = false;\n    _this._activeTween = null;\n    _this._lastPress = 0;\n    _this._panStartTime = 0;\n    _this._syncAfterUpdate = false;\n\n    _this.processShouldSet = function (e, gestureState) {\n      var inMask = _this.testPanResponderMask(e, gestureState);\n\n      if (inMask) {\n        var toggled = _this.processTapGestures();\n\n        if (toggled) return false;\n        if (_this.props.captureGestures && _this.props.acceptPan) return true;\n      }\n\n      if (_this.props.negotiatePan) return false;\n      _this._panStartTime = Date.now();\n      if (!inMask) return false;\n      if (!_this.props.acceptPan) return false;\n\n      _this.terminateActiveTween();\n\n      return true;\n    };\n\n    _this.processTapGestures = function () {\n      if (_this._activeTween) return false;\n      var minLastPressInterval = 500;\n\n      if (_this.props.acceptTap) {\n        _this._open ? _this.close() : _this.open();\n        return true;\n      }\n\n      if (_this.props.tapToClose && _this._open) {\n        _this.close();\n\n        return true;\n      }\n\n      if (_this.props.acceptDoubleTap) {\n        var now = new Date().getTime();\n        var timeDelta = now - _this._lastPress;\n        _this._lastPress = now;\n\n        if (timeDelta < minLastPressInterval) {\n          _this._open ? _this.close() : _this.open();\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.terminateActiveTween = function () {\n      if (_this._activeTween) {\n        _this._activeTween.terminate();\n\n        _this._activeTween = null;\n      }\n    };\n\n    _this.open = function () {\n      _this.props.onOpenStart && _this.props.onOpenStart();\n      if (_this._activeTween) return;\n      _this._activeTween = tween({\n        start: _this._left,\n        end: _this.getOpenLeft(),\n        duration: _this.props.tweenDuration,\n        easingType: _this.props.tweenEasing,\n        onFrame: function onFrame(tweenValue) {\n          _this._left = tweenValue;\n\n          _this.updatePosition();\n        },\n        onEnd: function onEnd() {\n          _this._activeTween = null;\n          _this._open = true;\n          _this._prevLeft = _this._left;\n\n          if (_this.props.type === 'overlay') {\n            _this.mainOverlay.setNativeProps({\n              style: {\n                width: _this.getMainWidth()\n              }\n            });\n          }\n\n          _this.props.onOpen();\n        }\n      });\n    };\n\n    _this.close = function () {\n      _this.props.onCloseStart && _this.props.onCloseStart();\n      if (_this._activeTween) return;\n      _this._activeTween = tween({\n        start: _this._left,\n        end: _this.getClosedLeft(),\n        easingType: _this.props.tweenEasing,\n        duration: _this.props.tweenDuration,\n        onFrame: function onFrame(tweenValue) {\n          _this._left = tweenValue;\n\n          _this.updatePosition();\n        },\n        onEnd: function onEnd() {\n          _this._activeTween = null;\n          _this._open = false;\n          _this._prevLeft = _this._left;\n          if (_this.props.type === 'overlay') _this.mainOverlay.setNativeProps({\n            style: {\n              width: 0\n            }\n          });\n\n          _this.props.onClose();\n        }\n      });\n    };\n\n    _this.toggle = function () {\n      _this._open ? _this.close() : _this.open();\n    };\n\n    _this.handleStartShouldSetPanResponderCapture = _this.handleStartShouldSetPanResponderCapture.bind(_assertThisInitialized(_this));\n    _this.handleStartShouldSetPanResponder = _this.handleStartShouldSetPanResponder.bind(_assertThisInitialized(_this));\n    _this.handleMoveShouldSetPanResponderCapture = _this.handleMoveShouldSetPanResponderCapture.bind(_assertThisInitialized(_this));\n    _this.handleMoveShouldSetPanResponder = _this.handleMoveShouldSetPanResponder.bind(_assertThisInitialized(_this));\n    _this.handlePanResponderMove = _this.handlePanResponderMove.bind(_assertThisInitialized(_this));\n    _this.handlePanResponderEnd = _this.handlePanResponderEnd.bind(_assertThisInitialized(_this));\n    _this.componentWillMount = _this.componentWillMount.bind(_assertThisInitialized(_this));\n    _this.componentWillReceiveProps = _this.componentWillReceiveProps.bind(_assertThisInitialized(_this));\n    _this.componentDidUpdate = _this.componentDidUpdate.bind(_assertThisInitialized(_this));\n    _this.updatePosition = _this.updatePosition.bind(_assertThisInitialized(_this));\n    _this.shouldOpenDrawer = _this.shouldOpenDrawer.bind(_assertThisInitialized(_this));\n    _this.testPanResponderMask = _this.testPanResponderMask.bind(_assertThisInitialized(_this));\n    _this.getMainView = _this.getMainView.bind(_assertThisInitialized(_this));\n    _this.getDrawerView = _this.getDrawerView.bind(_assertThisInitialized(_this));\n    _this.getOpenLeft = _this.getOpenLeft.bind(_assertThisInitialized(_this));\n    _this.getClosedLeft = _this.getClosedLeft.bind(_assertThisInitialized(_this));\n    _this.getMainWidth = _this.getMainWidth.bind(_assertThisInitialized(_this));\n    _this.getDrawerWidth = _this.getDrawerWidth.bind(_assertThisInitialized(_this));\n    _this.initialize = _this.initialize.bind(_assertThisInitialized(_this));\n    _this.handleSetViewport = _this.handleSetViewport.bind(_assertThisInitialized(_this));\n    _this.resync = _this.resync.bind(_assertThisInitialized(_this));\n    _this.requiresResync = _this.requiresResync.bind(_assertThisInitialized(_this));\n    _this.propsWhomRequireUpdate = ['closedDrawerOffset', 'openDrawerOffset', 'type'];\n    _this.state = {\n      viewport: props.deviceScreen\n    };\n    return _this;\n  }\n\n  _createClass(Drawer, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        drawer: this\n      };\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.initialize(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.requiresResync(nextProps)) {\n        this.resync(null, nextProps);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this._syncAfterUpdate) {\n        this._syncAfterUpdate = false;\n        this._open ? this.open() : this.close();\n      }\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      var mainProps = {};\n      var drawerProps = {};\n\n      var ratio = (this._left - this._offsetClosed) / (this.getOpenLeft() - this._offsetClosed);\n\n      switch (this.props.type) {\n        case 'overlay':\n          drawerProps[this.props.side] = -this.state.viewport.width + this._offsetOpen + this._left;\n          mainProps[this.props.side] = this._offsetClosed;\n          break;\n\n        case 'static':\n          mainProps[this.props.side] = this._left;\n          drawerProps[this.props.side] = 0;\n          break;\n\n        case 'displace':\n          mainProps[this.props.side] = this._left;\n          drawerProps[this.props.side] = -this.state.viewport.width + this._left + this._offsetOpen;\n          break;\n      }\n\n      if (this.props.tweenHandler) {\n        var propsFrag = this.props.tweenHandler(ratio, this.props.side);\n        mainProps = _extends(mainProps, propsFrag.main);\n        drawerProps = _extends(drawerProps, propsFrag.drawer);\n      }\n\n      this.drawer.setNativeProps({\n        style: drawerProps\n      });\n      this.main.setNativeProps({\n        style: mainProps\n      });\n    }\n  }, {\n    key: \"shouldOpenDrawer\",\n    value: function shouldOpenDrawer(dx) {\n      if (this._open) return dx < this.state.viewport.width * this.props.openDrawerThreshold;\n      return dx > this.state.viewport.width * this.props.openDrawerThreshold;\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponderCapture\",\n    value: function handleStartShouldSetPanResponderCapture(e, gestureState) {\n      if (this.props.captureGestures) return this.processShouldSet(e, gestureState);\n      return false;\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e, gestureState) {\n      if (!this.props.captureGestures) return this.processShouldSet(e, gestureState);\n      return false;\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponderCapture\",\n    value: function handleMoveShouldSetPanResponderCapture(e, gestureState) {\n      if (this.props.captureGestures && this.props.negotiatePan) return this.handleMoveShouldSetPanResponder(e, gestureState);\n      return false;\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder(e, gestureState) {\n      var inMask = this.testPanResponderMask(e, gestureState);\n      if (!inMask) return false;\n      if (!this.props.acceptPan) return false;\n      if (!this.props.negotiatePan || this.props.disabled || !this.props.acceptPan || this._panning) return false;\n      var swipeToLeft = gestureState.dx < 0 ? true : false;\n      var swipeToRight = gestureState.dx > 0 ? true : false;\n      var swipeUpDown = Math.abs(gestureState.dy) >= Math.abs(gestureState.dx) ? true : false;\n      var swipeInCloseDirection = this.props.side === 'left' ? swipeToLeft : swipeToRight;\n\n      if (swipeUpDown || this._open && !swipeInCloseDirection || !this._open && swipeInCloseDirection) {\n        return false;\n      }\n\n      this.terminateActiveTween();\n      return true;\n    }\n  }, {\n    key: \"testPanResponderMask\",\n    value: function testPanResponderMask(e, gestureState) {\n      if (this.props.disabled) return false;\n      var x0 = e.nativeEvent.pageX;\n      var deltaOpen = this.props.side === 'left' ? deviceScreen.width - x0 : x0;\n      var deltaClose = this.props.side === 'left' ? x0 : deviceScreen.width - x0;\n      var whenClosedMask = this.props.panOpenMask % 1 === 0 && this.props.panOpenMask > 1 ? this.props.panOpenMask : deviceScreen.width * this.props.panOpenMask;\n      var whenOpenMask = this.props.panCloseMask % 1 === 0 && this.props.panCloseMask > 1 ? this.props.panCloseMask : deviceScreen.width * this.props.panCloseMask;\n      if (this._open && deltaOpen > whenOpenMask) return false;\n      if (!this._open && deltaClose > whenClosedMask) return false;\n      return true;\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(e, gestureState) {\n      if (!this.props.acceptPan) return false;\n      var dx = gestureState.dx;\n      if (this._open ^ dx < 0 ^ this.props.side === 'right') return false;\n      var absDx = Math.abs(dx);\n      var moveX = gestureState.moveX;\n      var relMoveX = this.props.side === 'left' ? this._open ? -this.state.viewport.width + moveX : moveX : this._open ? -moveX : this.state.viewport.width - moveX;\n      var delta = relMoveX - dx;\n      var factor = absDx / Math.abs(relMoveX);\n      var adjustedDx = dx + delta * factor;\n      var left = this.props.panStartCompensation ? this._prevLeft + adjustedDx : this._prevLeft + dx;\n      left = Math.min(left, this.getOpenLeft());\n      left = Math.max(left, this.getClosedLeft());\n      this._left = left;\n      this.updatePosition();\n      this._panning = true;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(e, gestureState) {\n      if (Math.abs(gestureState.dx) < 50 && this._activeTween) return;\n      var absRelMoveX = this.props.side === 'left' ? this._open ? this.state.viewport.width - gestureState.moveX : gestureState.moveX : this._open ? gestureState.moveX : this.state.viewport.width - gestureState.moveX;\n      var calcPos = this.props.relativeDrag ? Math.abs(gestureState.dx) : absRelMoveX;\n      this.shouldOpenDrawer(calcPos) ? this.open() : this.close();\n      this.updatePosition();\n      this._prevLeft = this._left;\n      this._panning = false;\n    }\n  }, {\n    key: \"getMainView\",\n    value: function getMainView() {\n      var _this2 = this;\n\n      return React.createElement(View, _extends({}, this.responder.panHandlers, {\n        key: \"main\",\n        ref: function ref(c) {\n          return _this2.main = c;\n        },\n        style: [this.stylesheet.main, {\n          height: this.getHeight(),\n          width: this.getMainWidth()\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 7\n        }\n      }), this.props.children, this.props.type === 'overlay' ? React.createElement(View, {\n        ref: function ref(c) {\n          return _this2.mainOverlay = c;\n        },\n        style: styles.mainOverlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }\n      }) : null);\n    }\n  }, {\n    key: \"getDrawerView\",\n    value: function getDrawerView() {\n      var _this3 = this;\n\n      return React.createElement(View, _extends({}, this.responder.panHandlers, {\n        key: \"drawer\",\n        ref: function ref(c) {\n          return _this3.drawer = c;\n        },\n        style: [this.stylesheet.drawer, {\n          height: this.getHeight(),\n          width: this.getDrawerWidth()\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 7\n        }\n      }), this.props.content);\n    }\n  }, {\n    key: \"getOpenLeft\",\n    value: function getOpenLeft() {\n      return this.state.viewport.width - this._offsetOpen;\n    }\n  }, {\n    key: \"getClosedLeft\",\n    value: function getClosedLeft() {\n      return this._offsetClosed;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.state.viewport.height;\n    }\n  }, {\n    key: \"getMainWidth\",\n    value: function getMainWidth() {\n      return this.state.viewport.width - this._offsetClosed;\n    }\n  }, {\n    key: \"getDrawerWidth\",\n    value: function getDrawerWidth() {\n      return this.state.viewport.width - this._offsetOpen;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(props) {\n      var fullWidth = this.state.viewport.width;\n      this._offsetClosed = props.closedDrawerOffset % 1 === 0 ? props.closedDrawerOffset : props.closedDrawerOffset * fullWidth;\n      this._offsetOpen = props.openDrawerOffset % 1 === 0 ? props.openDrawerOffset : props.openDrawerOffset * fullWidth;\n      this._prevLeft = this._left;\n      var styles = {\n        container: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      };\n      styles.main = _extends({\n        position: 'absolute',\n        top: 0\n      }, {\n        borderWidth: 0\n      }, this.props.styles.main);\n      styles.drawer = _extends({\n        position: 'absolute',\n        top: 0\n      }, {\n        borderWidth: 0\n      }, this.props.styles.drawer);\n\n      if (props.initializeOpen === true) {\n        this._open = true;\n        this._left = fullWidth - this._offsetOpen;\n        styles.main[this.props.side] = 0;\n        styles.drawer[this.props.side] = 0;\n        if (props.type === 'static') styles.main[this.props.side] = fullWidth - this._offsetOpen;\n        if (props.type === 'displace') styles.main[this.props.side] = fullWidth - this._offsetOpen;\n      } else {\n        this._open = false;\n        this._left = this._offsetClosed;\n        styles.main[this.props.side] = this._offsetClosed;\n        if (props.type === 'static') styles.drawer[this.props.side] = 0;\n        if (props.type === 'overlay') styles.drawer[this.props.side] = this._offsetClosed + this._offsetOpen - fullWidth;\n        if (props.type === 'displace') styles.drawer[this.props.side] = -fullWidth + this._offsetClosed + this._offsetOpen;\n      }\n\n      if (this.main) {\n        this.drawer.setNativeProps({\n          style: {\n            left: styles.drawer.left\n          }\n        });\n        this.main.setNativeProps({\n          style: {\n            left: styles.main.left\n          }\n        });\n      } else {\n        this.stylesheet = StyleSheet.create(styles);\n        this.responder = PanResponder.create({\n          onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder,\n          onStartShouldSetPanResponderCapture: this.handleStartShouldSetPanResponderCapture,\n          onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder,\n          onMoveShouldSetPanResponderCapture: this.handleMoveShouldSetPanResponderCapture,\n          onPanResponderMove: this.handlePanResponderMove,\n          onPanResponderRelease: this.handlePanResponderEnd\n        });\n      }\n\n      this.resync(null, props);\n    }\n  }, {\n    key: \"handleSetViewport\",\n    value: function handleSetViewport(e) {\n      var viewport = e.nativeEvent.layout;\n      var oldViewport = this.state.viewport;\n      if (viewport.width === oldViewport.width && viewport.height === oldViewport.height) return;\n      var didRotationChange = viewport.width !== oldViewport.width;\n      this.resync(viewport, null, didRotationChange);\n    }\n  }, {\n    key: \"resync\",\n    value: function resync(viewport, props, didRotationChange) {\n      if (didRotationChange) this._syncAfterUpdate = true;\n      viewport = viewport || this.state.viewport;\n      props = props || this.props;\n      this._offsetClosed = props.closedDrawerOffset % 1 === 0 ? props.closedDrawerOffset : props.closedDrawerOffset * viewport.width;\n      this._offsetOpen = props.openDrawerOffset % 1 === 0 ? props.openDrawerOffset : props.openDrawerOffset * viewport.width;\n      this.setState({\n        viewport: viewport\n      });\n    }\n  }, {\n    key: \"requiresResync\",\n    value: function requiresResync(nextProps) {\n      for (var i = 0; i < this.propsWhomRequireUpdate.length; i++) {\n        var key = this.propsWhomRequireUpdate[i];\n        if (this.props[key] !== nextProps[key]) return true;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var first = this.props.type === 'overlay' ? this.getMainView() : this.getDrawerView();\n      var second = this.props.type === 'overlay' ? this.getDrawerView() : this.getMainView();\n      return React.createElement(View, {\n        key: \"drawerContainer\",\n        onLayout: this.handleSetViewport,\n        style: this.stylesheet.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 7\n        }\n      }, first, second);\n    }\n  }]);\n\n  return Drawer;\n}(Component);\n\nDrawer.tweenPresets = {\n  parallax: function parallax(ratio) {\n    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'left';\n\n    var drawer = _defineProperty({}, side, -150 * (1 - ratio));\n\n    return {\n      drawer: drawer\n    };\n  }\n};\nDrawer.propTypes = {\n  acceptDoubleTap: React.PropTypes.bool,\n  acceptPan: React.PropTypes.bool,\n  acceptTap: React.PropTypes.bool,\n  captureGestures: React.PropTypes.bool,\n  children: React.PropTypes.node,\n  closedDrawerOffset: React.PropTypes.number,\n  content: React.PropTypes.node,\n  deviceScreen: React.PropTypes.object,\n  disabled: React.PropTypes.bool,\n  initializeOpen: React.PropTypes.bool,\n  negotiatePan: React.PropTypes.bool,\n  onClose: React.PropTypes.func,\n  onCloseStart: React.PropTypes.func,\n  onOpen: React.PropTypes.func,\n  onOpenStart: React.PropTypes.func,\n  openDrawerOffset: React.PropTypes.number,\n  openDrawerThreshold: React.PropTypes.number,\n  panCloseMask: React.PropTypes.number,\n  panOpenMask: React.PropTypes.number,\n  panStartCompensation: React.PropTypes.bool,\n  relativeDrag: React.PropTypes.bool,\n  side: React.PropTypes.oneOf(['left', 'right']),\n  styles: React.PropTypes.object,\n  tapToClose: React.PropTypes.bool,\n  tweenDuration: React.PropTypes.number,\n  tweenEasing: React.PropTypes.string,\n  tweenHandler: React.PropTypes.func,\n  type: React.PropTypes.oneOf(['overlay', 'static', 'displace'])\n};\nDrawer.defaultProps = {\n  type: 'displace',\n  closedDrawerOffset: 0,\n  deviceScreen: deviceScreen,\n  openDrawerOffset: 0,\n  openDrawerThreshold: 0.25,\n  relativeDrag: true,\n  panStartCompensation: true,\n  panOpenMask: 0.25,\n  panCloseMask: 0.25,\n  captureGestures: false,\n  negotiatePan: false,\n  initializeOpen: false,\n  tweenHandler: null,\n  tweenDuration: 250,\n  tweenEasing: 'linear',\n  disabled: false,\n  acceptDoubleTap: false,\n  acceptTap: false,\n  acceptPan: true,\n  tapToClose: false,\n  styles: {},\n  onOpen: function onOpen() {},\n  onClose: function onClose() {},\n  side: 'left'\n};\nDrawer.childContextTypes = {\n  drawer: PropTypes.any\n};\nvar styles = StyleSheet.create({\n  mainOverlay: {\n    width: 0,\n    left: 0,\n    top: 0,\n    bottom: 0,\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n});\nmodule.exports = Drawer;","map":{"version":3,"sources":["/home/ebenezer/Project/Mobile Dev/instagram-clone-ui/node_modules/react-native-base/Components/vendor/react-native-drawer/index.js"],"names":["React","Component","PropTypes","tween","deviceScreen","Dimensions","get","Drawer","props","_left","_prevLeft","_offsetOpen","_offsetClosed","_open","_panning","_tweenPending","_activeTween","_lastPress","_panStartTime","_syncAfterUpdate","processShouldSet","e","gestureState","inMask","testPanResponderMask","toggled","processTapGestures","captureGestures","acceptPan","negotiatePan","Date","now","terminateActiveTween","minLastPressInterval","acceptTap","close","open","tapToClose","acceptDoubleTap","getTime","timeDelta","terminate","onOpenStart","start","end","getOpenLeft","duration","tweenDuration","easingType","tweenEasing","onFrame","tweenValue","updatePosition","onEnd","type","mainOverlay","setNativeProps","style","width","getMainWidth","onOpen","onCloseStart","getClosedLeft","onClose","toggle","handleStartShouldSetPanResponderCapture","bind","handleStartShouldSetPanResponder","handleMoveShouldSetPanResponderCapture","handleMoveShouldSetPanResponder","handlePanResponderMove","handlePanResponderEnd","componentWillMount","componentWillReceiveProps","componentDidUpdate","shouldOpenDrawer","getMainView","getDrawerView","getDrawerWidth","initialize","handleSetViewport","resync","requiresResync","propsWhomRequireUpdate","state","viewport","drawer","nextProps","mainProps","drawerProps","ratio","side","tweenHandler","propsFrag","main","dx","openDrawerThreshold","disabled","swipeToLeft","swipeToRight","swipeUpDown","Math","abs","dy","swipeInCloseDirection","x0","nativeEvent","pageX","deltaOpen","deltaClose","whenClosedMask","panOpenMask","whenOpenMask","panCloseMask","absDx","moveX","relMoveX","delta","factor","adjustedDx","left","panStartCompensation","min","max","absRelMoveX","calcPos","relativeDrag","responder","panHandlers","c","stylesheet","height","getHeight","children","styles","content","fullWidth","closedDrawerOffset","openDrawerOffset","container","flex","justifyContent","alignItems","position","top","borderWidth","initializeOpen","StyleSheet","create","PanResponder","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","onPanResponderRelease","layout","oldViewport","didRotationChange","setState","i","length","key","first","second","tweenPresets","parallax","propTypes","bool","node","number","object","func","oneOf","string","defaultProps","childContextTypes","any","bottom","backgroundColor","module","exports"],"mappings":"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","sourcesContent":["import React, {Component,PropTypes} from 'react';\nimport {\n  PanResponder,\n  View,\n  StyleSheet,\n  Dimensions\n} from 'react-native'\nimport tween from './tweener'\n\nlet deviceScreen = Dimensions.get('window')\n\nclass Drawer extends Component {\n\n  _left = 0;\n  _prevLeft = 0;\n  _offsetOpen = 0;\n  _offsetClosed = 0;\n  _open = false;\n  _panning = false;\n  _tweenPending = false;\n  _activeTween = null;\n  _lastPress = 0;\n  _panStartTime = 0;\n  _syncAfterUpdate = false;\n\n  static tweenPresets = {\n    parallax: (ratio, side = 'left') => {\n      let drawer = { [side] : -150 * (1 - ratio)}\n      return { drawer }\n    }\n  };\n\n  static propTypes = {\n    acceptDoubleTap: React.PropTypes.bool,\n    acceptPan: React.PropTypes.bool,\n    acceptTap: React.PropTypes.bool,\n    captureGestures: React.PropTypes.bool,\n    children: React.PropTypes.node,\n    closedDrawerOffset: React.PropTypes.number,\n    content: React.PropTypes.node,\n    deviceScreen: React.PropTypes.object,\n    disabled: React.PropTypes.bool,\n    initializeOpen: React.PropTypes.bool,\n    negotiatePan: React.PropTypes.bool,\n    onClose: React.PropTypes.func,\n    onCloseStart: React.PropTypes.func,\n    onOpen: React.PropTypes.func,\n    onOpenStart: React.PropTypes.func,\n    openDrawerOffset: React.PropTypes.number,\n    openDrawerThreshold: React.PropTypes.number,\n    panCloseMask: React.PropTypes.number,\n    panOpenMask: React.PropTypes.number,\n    panStartCompensation: React.PropTypes.bool,\n    relativeDrag: React.PropTypes.bool,\n    side: React.PropTypes.oneOf(['left', 'right']),\n    styles: React.PropTypes.object,\n    tapToClose: React.PropTypes.bool,\n    tweenDuration: React.PropTypes.number,\n    tweenEasing: React.PropTypes.string,\n    tweenHandler: React.PropTypes.func,\n    type: React.PropTypes.oneOf(['overlay', 'static', 'displace']),\n  };\n\n  static defaultProps = {\n    type: 'displace',\n    closedDrawerOffset: 0,\n    deviceScreen: deviceScreen,\n    openDrawerOffset: 0,\n    openDrawerThreshold: 0.25,\n    relativeDrag: true,\n    panStartCompensation: true,\n    panOpenMask: 0.25,\n    panCloseMask: 0.25,\n    captureGestures: false,\n    negotiatePan: false,\n    initializeOpen: false,\n    tweenHandler: null,\n    tweenDuration: 250,\n    tweenEasing: 'linear',\n    disabled: false,\n    acceptDoubleTap: false,\n    acceptTap: false,\n    acceptPan: true,\n    tapToClose: false,\n    styles: {},\n    onOpen: () => {},\n    onClose: () => {},\n    side: 'left',\n  };\n\n  constructor(props) {\n    super(props)\n    // `this` keyword binding - No Autobinding in ES6 Classes\n    this.handleStartShouldSetPanResponderCapture = this.handleStartShouldSetPanResponderCapture.bind(this)\n    this.handleStartShouldSetPanResponder = this.handleStartShouldSetPanResponder.bind(this)\n    this.handleMoveShouldSetPanResponderCapture = this.handleMoveShouldSetPanResponderCapture.bind(this)\n    this.handleMoveShouldSetPanResponder = this.handleMoveShouldSetPanResponder.bind(this)\n    this.handlePanResponderMove = this.handlePanResponderMove.bind(this)\n    this.handlePanResponderEnd = this.handlePanResponderEnd.bind(this)\n    this.componentWillMount = this.componentWillMount.bind(this)\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this)\n    this.componentDidUpdate = this.componentDidUpdate.bind(this)\n    this.updatePosition = this.updatePosition.bind(this)\n    this.shouldOpenDrawer = this.shouldOpenDrawer.bind(this)\n    this.testPanResponderMask = this.testPanResponderMask.bind(this)\n    this.getMainView = this.getMainView.bind(this)\n    this.getDrawerView = this.getDrawerView.bind(this)\n    this.getOpenLeft = this.getOpenLeft.bind(this)\n    this.getClosedLeft = this.getClosedLeft.bind(this)\n    this.getMainWidth = this.getMainWidth.bind(this)\n    this.getDrawerWidth = this.getDrawerWidth.bind(this)\n    this.initialize = this.initialize.bind(this)\n    this.handleSetViewport = this.handleSetViewport.bind(this)\n    this.resync = this.resync.bind(this)\n    this.requiresResync = this.requiresResync.bind(this)\n\n    this.propsWhomRequireUpdate = [\n      'closedDrawerOffset',\n      'openDrawerOffset',\n      'type'\n    ]\n\n    this.state = { viewport: props.deviceScreen }\n  }\n\n  static childContextTypes = {\n    drawer: PropTypes.any\n  };\n\n  getChildContext() {\n    return { drawer: this }\n  }\n\n  componentWillMount() {\n    this.initialize(this.props)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.requiresResync(nextProps)) {\n      this.resync(null, nextProps)\n    }\n  }\n\n  componentDidUpdate() {\n    if (this._syncAfterUpdate) {\n      this._syncAfterUpdate = false\n      this._open ? this.open() : this.close()\n    }\n  }\n\n  updatePosition() {\n    let mainProps = {}\n    let drawerProps = {}\n    let ratio = (this._left - this._offsetClosed) / (this.getOpenLeft() - this._offsetClosed)\n\n    switch (this.props.type) {\n      case 'overlay':\n        drawerProps[this.props.side] = -this.state.viewport.width + this._offsetOpen + this._left\n        mainProps[this.props.side] = this._offsetClosed\n        break\n      case 'static':\n        mainProps[this.props.side] = this._left\n        drawerProps[this.props.side] = 0\n        break\n      case 'displace':\n        mainProps[this.props.side] = this._left\n        drawerProps[this.props.side] = -this.state.viewport.width + this._left + this._offsetOpen\n        break\n    }\n\n    if (this.props.tweenHandler) {\n      let propsFrag = this.props.tweenHandler(ratio, this.props.side)\n      mainProps = Object.assign(mainProps, propsFrag.main)\n      drawerProps = Object.assign(drawerProps, propsFrag.drawer)\n    }\n    this.drawer.setNativeProps({style: drawerProps})\n    this.main.setNativeProps({style: mainProps})\n  }\n\n  shouldOpenDrawer(dx) {\n    if (this._open) return dx < this.state.viewport.width * this.props.openDrawerThreshold\n    return dx > this.state.viewport.width * this.props.openDrawerThreshold\n  }\n\n  handleStartShouldSetPanResponderCapture(e, gestureState) {\n    if (this.props.captureGestures) return this.processShouldSet(e, gestureState)\n    return false\n  }\n\n  handleStartShouldSetPanResponder(e, gestureState) {\n    if (!this.props.captureGestures) return this.processShouldSet(e, gestureState)\n    return false\n  }\n\n  processShouldSet = (e, gestureState) => {\n    let inMask = this.testPanResponderMask(e, gestureState)\n    if (inMask) {\n      let toggled = this.processTapGestures()\n      if (toggled) return false\n      if (this.props.captureGestures && this.props.acceptPan) return true\n    }\n    if (this.props.negotiatePan) return false\n    this._panStartTime = Date.now()\n    if (!inMask) return false\n    if (!this.props.acceptPan) return false\n    this.terminateActiveTween()\n    return true\n  };\n\n  handleMoveShouldSetPanResponderCapture(e, gestureState) {\n    if (this.props.captureGestures && this.props.negotiatePan) return this.handleMoveShouldSetPanResponder(e, gestureState)\n    return false\n  }\n\n  handleMoveShouldSetPanResponder(e, gestureState) {\n    let inMask = this.testPanResponderMask(e, gestureState)\n    if (!inMask) return false\n    if (!this.props.acceptPan) return false\n\n    if (!this.props.negotiatePan || this.props.disabled || !this.props.acceptPan || this._panning) return false\n    let swipeToLeft = (gestureState.dx < 0) ? true : false\n    let swipeToRight = (gestureState.dx > 0) ? true : false\n    let swipeUpDown = (Math.abs(gestureState.dy) >= Math.abs(gestureState.dx)) ? true : false\n    let swipeInCloseDirection = (this.props.side === 'left') ? swipeToLeft : swipeToRight\n    if (swipeUpDown || (this._open && !swipeInCloseDirection) || (!this._open && swipeInCloseDirection)) {\n      return false\n    }\n\n    this.terminateActiveTween()\n    return true\n  }\n\n  processTapGestures = () => {\n    if (this._activeTween) return false // disable tap gestures during tween\n    let minLastPressInterval = 500\n    if (this.props.acceptTap) {\n      this._open ? this.close() : this.open()\n      return true\n    }\n    if (this.props.tapToClose && this._open) {\n      this.close()\n      return true\n    }\n    if (this.props.acceptDoubleTap) {\n      let now = new Date().getTime()\n      let timeDelta = now - this._lastPress\n      this._lastPress = now\n      if (timeDelta < minLastPressInterval) {\n        this._open ? this.close() : this.open()\n        return true\n      }\n    }\n    return false\n  };\n\n  testPanResponderMask(e, gestureState) {\n    if (this.props.disabled) return false\n    let x0 = e.nativeEvent.pageX\n\n    let deltaOpen = this.props.side === 'left' ? deviceScreen.width - x0 : x0\n    let deltaClose = this.props.side === 'left' ? x0 : deviceScreen.width - x0\n\n    let whenClosedMask = this.props.panOpenMask % 1 === 0 && this.props.panOpenMask > 1 ? this.props.panOpenMask : deviceScreen.width * this.props.panOpenMask\n    let whenOpenMask = this.props.panCloseMask % 1 === 0 && this.props.panCloseMask > 1 ? this.props.panCloseMask : deviceScreen.width * this.props.panCloseMask\n    if ( this._open && deltaOpen > whenOpenMask ) return false\n    if ( !this._open && deltaClose > whenClosedMask ) return false\n    return true\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    if (!this.props.acceptPan) return false\n\n    //Math is ugly overly verbose here, probably can be greatly cleaned up\n    let dx = gestureState.dx\n    //Do nothing if we are panning the wrong way\n    if (this._open ^ dx < 0 ^ this.props.side === 'right') return false\n\n    let absDx = Math.abs(dx)\n    let moveX = gestureState.moveX\n    let relMoveX = this.props.side === 'left'\n      ? this._open ? -this.state.viewport.width + moveX : moveX\n      : this._open ? -moveX : this.state.viewport.width - moveX\n    let delta = relMoveX - dx\n    let factor = absDx / Math.abs(relMoveX)\n    let adjustedDx = dx + delta * factor\n    let left = this.props.panStartCompensation ? this._prevLeft + adjustedDx : this._prevLeft + dx\n    left = Math.min(left, this.getOpenLeft())\n    left = Math.max(left, this.getClosedLeft())\n    this._left = left\n    this.updatePosition()\n    this._panning = true\n  }\n\n  terminateActiveTween = () => {\n    if (this._activeTween) {\n      this._activeTween.terminate()\n      this._activeTween = null\n    }\n  };\n\n  open = () => {\n    this.props.onOpenStart && this.props.onOpenStart()\n    if (this._activeTween) return\n    this._activeTween = tween({\n      start: this._left,\n      end: this.getOpenLeft(),\n      duration: this.props.tweenDuration,\n      easingType: this.props.tweenEasing,\n      onFrame: (tweenValue) => {\n        this._left = tweenValue\n        this.updatePosition()\n      },\n      onEnd: () => {\n        this._activeTween = null\n        this._open = true\n        this._prevLeft = this._left\n        if (this.props.type === 'overlay') {\n          this.mainOverlay.setNativeProps({ style: { width: this.getMainWidth() }})\n        }\n        this.props.onOpen()\n      }\n    })\n  };\n\n  close = () => {\n    this.props.onCloseStart && this.props.onCloseStart()\n    if (this._activeTween) return\n    this._activeTween = tween({\n      start: this._left,\n      end: this.getClosedLeft(),\n      easingType: this.props.tweenEasing,\n      duration: this.props.tweenDuration,\n      onFrame: (tweenValue) => {\n        this._left = tweenValue\n        this.updatePosition()\n      },\n      onEnd: () => {\n        this._activeTween = null\n        this._open = false\n        this._prevLeft = this._left\n        if (this.props.type === 'overlay') this.mainOverlay.setNativeProps({ style: { width: 0 }})\n        this.props.onClose()\n      }\n    })\n  };\n\n  toggle = () => {\n    this._open ? this.close() : this.open()\n  };\n\n  handlePanResponderEnd(e, gestureState) {\n    if (Math.abs(gestureState.dx) < 50 && this._activeTween) return\n\n    let absRelMoveX = this.props.side === 'left'\n      ? this._open ? this.state.viewport.width - gestureState.moveX : gestureState.moveX\n      : this._open ? gestureState.moveX : this.state.viewport.width - gestureState.moveX\n    let calcPos = this.props.relativeDrag ? Math.abs(gestureState.dx) : absRelMoveX\n\n    this.shouldOpenDrawer(calcPos) ? this.open() : this.close()\n\n    this.updatePosition()\n    this._prevLeft = this._left\n    this._panning = false\n  }\n\n  getMainView() {\n    return (\n      <View\n        {...this.responder.panHandlers}\n        key=\"main\"\n        ref={c => this.main = c}\n        style={[this.stylesheet.main, {height: this.getHeight(), width: this.getMainWidth()}]}\n        >\n        {this.props.children}\n        {this.props.type === 'overlay'\n          ? <View\n              ref={c => this.mainOverlay = c}\n              style={styles.mainOverlay}\n              />\n          : null}\n      </View>\n    )\n  }\n\n  getDrawerView() {\n    return (\n      <View\n        {...this.responder.panHandlers}\n        key=\"drawer\"\n        ref={c => this.drawer = c}\n        style={[this.stylesheet.drawer, {height: this.getHeight(), width: this.getDrawerWidth()}]}\n      >\n        {this.props.content}\n      </View>\n    )\n  }\n\n  getOpenLeft() {\n    return this.state.viewport.width - this._offsetOpen\n  }\n\n  getClosedLeft() {\n    return this._offsetClosed\n  }\n\n  getHeight() {\n    return this.state.viewport.height\n  }\n\n  getMainWidth() {\n    return this.state.viewport.width - this._offsetClosed\n  }\n\n  getDrawerWidth() {\n    return this.state.viewport.width - this._offsetOpen\n  }\n\n  initialize(props) {\n    let fullWidth = this.state.viewport.width\n    this._offsetClosed = props.closedDrawerOffset % 1 === 0 ? props.closedDrawerOffset : props.closedDrawerOffset * fullWidth\n    this._offsetOpen = props.openDrawerOffset % 1 === 0 ? props.openDrawerOffset : props.openDrawerOffset * fullWidth\n    this._prevLeft = this._left\n\n    let styles = {\n      container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }\n\n    styles.main = Object.assign({\n      position: 'absolute',\n      top: 0,\n    }, {borderWidth:0}, this.props.styles.main)\n\n    styles.drawer = Object.assign({\n      position: 'absolute',\n      top: 0,\n    }, {borderWidth:0}, this.props.styles.drawer)\n\n    if (props.initializeOpen === true) { // open\n      this._open = true\n      this._left = fullWidth - this._offsetOpen\n      styles.main[this.props.side] = 0\n      styles.drawer[this.props.side] = 0\n      if (props.type === 'static') styles.main[this.props.side] = fullWidth - this._offsetOpen\n      if (props.type === 'displace') styles.main[this.props.side] = fullWidth - this._offsetOpen\n    } else { // closed\n      this._open = false\n      this._left = this._offsetClosed\n      styles.main[this.props.side] = this._offsetClosed\n      if (props.type === 'static') styles.drawer[this.props.side] = 0\n      if (props.type === 'overlay') styles.drawer[this.props.side] = this._offsetClosed + this._offsetOpen - fullWidth\n      if (props.type === 'displace') styles.drawer[this.props.side] = - fullWidth + this._offsetClosed + this._offsetOpen\n    }\n\n    if (this.main) {\n      this.drawer.setNativeProps({ style: {left: styles.drawer.left}})\n      this.main.setNativeProps({ style: {left: styles.main.left}})\n    } else {\n      this.stylesheet = StyleSheet.create(styles)\n      this.responder = PanResponder.create({\n        onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder,\n        onStartShouldSetPanResponderCapture: this.handleStartShouldSetPanResponderCapture,\n        onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder,\n        onMoveShouldSetPanResponderCapture: this.handleMoveShouldSetPanResponderCapture,\n        onPanResponderMove: this.handlePanResponderMove,\n        onPanResponderRelease: this.handlePanResponderEnd,\n      })\n    }\n\n    this.resync(null, props)\n  }\n\n  handleSetViewport(e) {\n    let viewport = e.nativeEvent.layout\n    let oldViewport = this.state.viewport\n    if (viewport.width === oldViewport.width && viewport.height === oldViewport.height) return\n    let didRotationChange = viewport.width !== oldViewport.width\n    this.resync(viewport, null, didRotationChange)\n  }\n\n  resync(viewport, props, didRotationChange) {\n    if (didRotationChange) this._syncAfterUpdate = true\n    viewport = viewport || this.state.viewport\n    props = props || this.props\n    this._offsetClosed = props.closedDrawerOffset % 1 === 0 ? props.closedDrawerOffset : props.closedDrawerOffset * viewport.width\n    this._offsetOpen = props.openDrawerOffset % 1 === 0 ? props.openDrawerOffset : props.openDrawerOffset * viewport.width\n    this.setState({ viewport })\n  }\n\n  requiresResync(nextProps) {\n    for (let i = 0; i < this.propsWhomRequireUpdate.length; i++) {\n      let key = this.propsWhomRequireUpdate[i]\n      if (this.props[key] !== nextProps[key]) return true\n    }\n  }\n\n  render() {\n    let first = this.props.type === 'overlay' ? this.getMainView() : this.getDrawerView()\n    let second = this.props.type === 'overlay' ? this.getDrawerView() : this.getMainView()\n\n    return (\n      <View\n        key=\"drawerContainer\"\n        onLayout={this.handleSetViewport}\n        style={this.stylesheet.container}\n        >\n        {first}\n        {second}\n      </View>\n    )\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  mainOverlay: {\n    width: 0,\n    left: 0,\n    top: 0,\n    bottom: 0,\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n})\n\nmodule.exports = Drawer\n"]},"metadata":{},"sourceType":"module"}